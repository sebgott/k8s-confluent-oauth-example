apiVersion: platform.confluent.io/v1beta1
kind: KRaftController
metadata:
  name: kraftcontroller
  namespace: confluent
spec:
  dataVolumeCapacity: 10G
  image:
    application: confluentinc/cp-server:7.7.0
    init: confluentinc/confluent-init-container:2.9.0
  listeners:
    controller:
      tls:
        enabled: true
      authentication:
        type: plain
        jaasConfig:
          secretRef: credential
  authorization:
    type: rbac
    superUsers:
      - User:kafka
      - User:ssologin
  dependencies:
    mdsKafkaCluster:
      bootstrapEndpoint: kafka.confluent.svc.cluster.local:9073
      authentication:
        type: oauth
        jaasConfig:
          secretRef: oauth-jass
        oauthSettings:
          tokenEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/token
      tls:
        enabled: true
  tls:
    secretRef: tls-group1
  replicas: 3
---
apiVersion: platform.confluent.io/v1beta1
kind: Kafka
metadata:
  name: kafka
  namespace: confluent
spec:
  replicas: 3
  image:
    application: confluentinc/cp-server:7.7.0
    init: confluentinc/confluent-init-container:2.9.0
  dataVolumeCapacity: 10Gi
  tls:
    secretRef: tls-group1
  listeners:
    internal:
      authentication:
        type: plain
        jaasConfig:
          secretRef: credential
      tls:
        enabled: true
    external:
      authentication:
        # type: ldap
        type: oauth
        jaasConfig:
          secretRef: oauth-jass
        oauthSettings:
          tokenEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/token
          expectedIssuer: http://keycloak:8080/realms/sso_test
          jwksEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/certs
          groupsClaimName: profile_groups
          subClaimName: sub
  authorization:
    type: rbac
    superUsers:
      - User:ssologin
      - User:kafka
  services:
    mds:
      tls:
        enabled: true
      tokenKeyPair:
        secretRef: mds-token
      provider:
        ldap:
          address: ldap://ldap.confluent.svc.cluster.local:389
          authentication:
            type: simple
            simple:
              secretRef: credential
          tls:
            enabled: false
          configurations:
            groupNameAttribute: cn
            groupObjectClass: group
            groupMemberAttribute: member
            groupMemberAttributePattern: CN=(.*),DC=test,DC=com
            groupSearchBase: dc=test,dc=com
            userNameAttribute: cn
            userMemberOfAttributePattern: CN=(.*),DC=test,DC=com
            userObjectClass: organizationalRole
            userSearchBase: dc=test,dc=com
        oauth:
          configurations:
            expectedIssuer: http://keycloak:8080/realms/sso_test
            jwksEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/certs
            subClaimName: client_id
        sso:
          enabled: true
          clientCredentials:
            secretRef: oauth-jass-oidc
          configurations:
            groupsClaimName: profile_groups
            subClaimName: sub
            issuer: http://keycloak:8080/realms/sso_test
            jwksEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/certs
            authorizeBaseEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/auth
            tokenBaseEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/token
            refreshToken: true
  dependencies:
    kRaftController:
      controllerListener:
        tls:
          enabled: true
        authentication:
          type: plain
          jaasConfig:
            secretRef: credential
      clusterRef:
        name: kraftcontroller
    kafkaRest:
      authentication:
        type: oauth
        jaasConfig:
          secretRef: oauth-jass
        oauthSettings:
          tokenEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/token
          expectedIssuer: http://keycloak:8080/realms/sso_test
          jwksEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/certs
          subClaimName: client_id
---
apiVersion: platform.confluent.io/v1beta1
kind: KafkaRestClass
metadata:
  name: default
  namespace: confluent
spec:
  kafkaRest:
    authentication:
      type: oauth
      oauth:
        secretRef: oauth-jass
        configuration:
          tokenEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/token
          expectedIssuer: http://keycloak:8080/realms/sso_test
          jwksEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/certs
---
apiVersion: platform.confluent.io/v1beta1
kind: KafkaRestClass
metadata:
  name: default-ldap
  namespace: confluent
spec:
  kafkaClusterRef:
    name: kafka
  kafkaRest:
    authentication:
      type: bearer
      bearer:
        secretRef: rest-credential
---
apiVersion: platform.confluent.io/v1beta1
kind: SchemaRegistry
metadata:
  name: schemaregistry
  namespace: confluent
spec:
  replicas: 1
  image:
    application: confluentinc/cp-schema-registry:7.7.0
    init: confluentinc/confluent-init-container:2.9.0
  tls:
    secretRef: tls-group1
  authorization:
    type: rbac
  dependencies:
    kafka:
      bootstrapEndpoint: kafka.confluent.svc.cluster.local:9071
      tls:
        enabled: true
    mds:
      endpoint: https://kafka.confluent.svc.cluster.local:8090
      tokenKeyPair:
        secretRef: mds-token
      authentication:
        type: oauth
        oauth:
          secretRef: oauth-jass
          configuration:
            tokenEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/token
            expectedIssuer: http://keycloak:8080/realms/sso_test
            jwksEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/certs
            subClaimName: client_id
      tls:
        enabled: true
---
apiVersion: platform.confluent.io/v1beta1
kind: Connect
metadata:
  name: connect
  namespace: confluent
spec:
  configOverrides:
    server:
    # This is required due to limitation on connect worker in 7.7 for this upgrade
    # configurations for producer, consumer & admin should remain same as in case of ldap 
     - producer.sasl.login.callback.handler.class=io.confluent.kafka.clients.plugins.auth.token.TokenUserLoginCallbackHandler 
     - producer.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required metadataServerUrls="https://kafka.operator.svc.cluster.local:8090" username="connect" password="connect-secret";
     - consumer.sasl.login.callback.handler.class=io.confluent.kafka.clients.plugins.auth.token.TokenUserLoginCallbackHandler
     - consumer.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required metadataServerUrls="https://kafka.operator.svc.cluster.local:8090" username="connect" password="connect-secret";
     - admin.sasl.login.callback.handler.class=io.confluent.kafka.clients.plugins.auth.token.TokenUserLoginCallbackHandler 
     - admin.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required metadataServerUrls="https://kafka.operator.svc.cluster.local:8090" username="connect" password="connect-secret";
  podTemplate:
    probe:
      liveness:
        periodSeconds: 400
        failureThreshold: 1
        timeoutSeconds: 5
      readiness:
        periodSeconds: 400
        failureThreshold: 5
        timeoutSeconds: 5
  replicas: 2
  image:
    application: confluentinc/cp-server-connect:7.7.0
    init: confluentinc/confluent-init-container:2.9.0
  build:
    type: onDemand
    onDemand:
      plugins:
        locationType: confluentHub
        confluentHub:
          - name: kafka-connect-datagen
            owner: confluentinc
            version: 0.5.2
  tls:
    secretRef: tls-group1
  authorization:
    type: rbac
  dependencies:
    kafka:
      bootstrapEndpoint: kafka.confluent.svc.cluster.local:9071
      tls:
        enabled: true
    mds:
      endpoint: https://kafka.confluent.svc.cluster.local:8090
      tokenKeyPair:
        secretRef: mds-token
      authentication:
        type: oauth
        oauth:
          secretRef: oauth-jass
          configuration:
            tokenEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/token
            expectedIssuer: http://keycloak:8080/realms/sso_test
            jwksEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/certs
            subClaimName: client_id
      tls:
        enabled: true
---
apiVersion: platform.confluent.io/v1beta1
kind: ControlCenter
metadata:
  name: controlcenter
  namespace: confluent
spec:
  configOverrides:
    server:
      - control.center.replication.factor=3
      - control.center.internal.topics.replication.factor=3
  replicas: 1
  podTemplate:
    probe:
      liveness:
        periodSeconds: 200
        failureThreshold: 1
        timeoutSeconds: 5
      readiness:
        periodSeconds: 200
        failureThreshold: 5
        timeoutSeconds: 5
  image:
    application: confluentinc/cp-enterprise-control-center:7.7.0
    init: confluentinc/confluent-init-container:2.9.0
  dataVolumeCapacity: 10Gi
  authorization:
    type: rbac
  tls:
    secretRef: tls-group1
  dependencies:
    kafka:
      bootstrapEndpoint: kafka.confluent.svc.cluster.local:9071
      authentication:
        type: plain
        jaasConfig:
          secretRef: credential
      tls:
        enabled: true
    mds:
      ssoProtocol: oidc
      endpoint: https://kafka.confluent.svc.cluster.local:8090
      tokenKeyPair:
        secretRef: mds-token
      authentication:
        type: oauth
        oauth:
          secretRef: oauth-jass
          configuration:
            tokenEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/token
            expectedIssuer: http://keycloak:8080/realms/sso_test
            jwksEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/certs
            groupsClaimName: profile_groups
            subClaimName: client_id
      tls:
        enabled: true
    connect:
      - name: connect
        url:  https://connect.confluent.svc.cluster.local:8083
        tls:
          enabled: true
    schemaRegistry:
      url: https://schemaregistry.confluent.svc.cluster.local:8081
      tls:
        enabled: true
---
apiVersion: platform.confluent.io/v1beta1
kind: ConfluentRolebinding
metadata:
  name: oauth-new-cfrb-c3
  namespace: confluent
spec:
  principal:
    name: ssologin
    type: user
  role: SystemAdmin
  kafkaRestClassRef:
    name: default
---
apiVersion: platform.confluent.io/v1beta1
kind: ConfluentRolebinding
metadata:
  name: oauth-new-cfrb-sr-0
  namespace: confluent
spec:
  clustersScopeByIds:
    schemaRegistryClusterId: id_schemaregistry_operator
  principal:
    name: ssologin
    type: user
  role: SystemAdmin
  kafkaRestClassRef:
    name: default
---
apiVersion: platform.confluent.io/v1beta1
kind: ConfluentRolebinding
metadata:
  name: oauth-new-cfrb-sr-1
  namespace: confluent
spec:
  principal:
    name: ssologin
    type: user
  resourcePatterns:
    - name: _confluent-license
      patternType: LITERAL
      resourceType: Topic
    - name: _confluent-command
      patternType: LITERAL
      resourceType: Topic
    - name: _exporter_configs
      patternType: LITERAL
      resourceType: Topic
    - name: _exporter_states
      patternType: LITERAL
      resourceType: Topic
    - name: _schemas_schemaregistry_operator
      patternType: LITERAL
      resourceType: Topic
    - name: id_schemaregistry_operator
      patternType: LITERAL
      resourceType: Group
  role: ResourceOwner
  kafkaRestClassRef:
    name: default
---
apiVersion: platform.confluent.io/v1beta1
kind: ConfluentRolebinding
metadata:
  name: oauth-new-cfrb-connect-0
  namespace: confluent
spec:
  clustersScopeByIds:
    connectClusterId: operator.connect
  principal:
    name: ssologin
    type: user
  role: SecurityAdmin
  kafkaRestClassRef:
    name: default
---
apiVersion: platform.confluent.io/v1beta1
kind: ConfluentRolebinding
metadata:
  name: oauth-new-cfrb-connect-1
  namespace: confluent
spec:
  principal:
    name: ssologin
    type: user
  resourcePatterns:
    - name: operator.connect
      patternType: LITERAL
      resourceType: Group
    - name: operator.connect-
      patternType: PREFIXED
      resourceType: Topic
  role: ResourceOwner
  kafkaRestClassRef:
    name: default
---
apiVersion: platform.confluent.io/v1beta1
kind: ConfluentRolebinding
metadata:
  name: oauth-new-cfrb-connect-2
  namespace: confluent
spec:
  principal:
    name: ssologin
    type: user
  resourcePatterns:
    - name: _confluent-monitoring
      patternType: PREFIXED
      resourceType: Topic
  role: DeveloperWrite
  kafkaRestClassRef:
    name: default
